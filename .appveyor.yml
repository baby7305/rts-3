# appveyor ci configuration
image: Visual Studio 2017
version: "0.1.{build}-ci"
skip_tags: true
shallow_clone: false # need git submodules
clone_folder: c:\project\rts

branches:
  except:
  - gh-pages

platform:
- x64
- Win32

configuration:
- Debug
- Release

init:
- cmd: cmake --version
- cmd: msbuild /nologo /version && echo(
- cmd: python --version

matrix:
  fast_finish: true

environment:
  CoverityProjectToken:
    secure: 4aV12bYKyDsjPFnVg3OsGFssiOS9MUCok+mheSeA458=
  CoverityNotificationEmail:
    secure: oQk7R/1drdAfKvr6myBlSrzHO0++8va043JhJIcCLHU=

cache:
- C:\project\rts\build\opt\boost-cmake\boost_1_64_0.tar.xz

install: 
- cmd: choco install doxygen.portable
- ps: |
    # Download Coverity Build Tool if we are doing scheduled build.
    if ($env:APPVEYOR_SCHEDULED_BUILD -eq "True" -and $env:PLATFORM -eq "x64" -and $env:CONFIGURATION -eq "Debug") {
      "Downloading coverity"
      Invoke-WebRequest `
        -Uri "https://scan.coverity.com/download/cxx/win64" `
        -Body @{ project = "$env:APPVEYOR_REPO_NAME";
                token = "$env:CoverityProjectToken" } `
        -OutFile "$env:APPVEYOR_BUILD_FOLDER\coverity.zip"
      "Pushing artifact so we can get a look at it in case something goes wrong"
      Push-AppveyorArtifact $env:APPVEYOR_BUILD_FOLDER\coverity.zip
      "Extracting $env:APPVEYOR_BUILD_FOLDER\coverity.zip to $env:APPVEYOR_BUILD_FOLDER"
      Add-Type -AssemblyName "System.IO.Compression.FileSystem"
      [IO.Compression.ZipFile]::ExtractToDirectory(
        "$env:APPVEYOR_BUILD_FOLDER\coverity.zip",
        "$env:APPVEYOR_BUILD_FOLDER")
    }

before_build:
- cmd: git submodule update --init
- cmd: if "%platform%"=="Win32" set CMAKE_GENERATOR_NAME=Visual Studio 15 2017
- cmd: if "%platform%"=="x64" set CMAKE_GENERATOR_NAME=Visual Studio 15 2017 Win64
- cmd: cmake -G "%CMAKE_GENERATOR_NAME%" -Hc:\project\rts -Bc:\project\rts\build

build_script: 
- ps: |
    $buildCmd = "cmake";
    $buildArgs = @(
      "--build","build",
      "--target","ALL_BUILD",
      "--config","$env:CONFIGURATION",
      "--",
      "/m"
      "/property:GenerateFullPaths=true"
      "/l:C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll", 
      "/p:Platform=$env:PLATFORM"
      )
    if ($env:APPVEYOR_SCHEDULED_BUILD -ne "True" -or $env:PLATFORM -ne "x64" -or $env:CONFIGURATION -ne "Debug") {
      & $buildCmd $buildArgs
      return # exit script
    }
    # Else, build project with Coverity Scan.
    "Building project with Coverity Scan..."
    & ".\cov-analysis-win64-7.6.0\bin\cov-build.exe" `
      --dir cov-int `
      $buildCmd $buildArgs
    # Compress results.
    "Compressing Coverity results..."
    $zipEncoderDef = @'
      namespace AnalyseCode {
        public class PortableFileNameEncoder: System.Text.UTF8Encoding {
          public PortableFileNameEncoder() {}
          public override byte[] GetBytes(string entry) {
            return base.GetBytes(entry.Replace("\\", "/"));
          }
        }
      }
    '@
    Add-Type -TypeDefinition $zipEncoderDef
    [IO.Compression.ZipFile]::CreateFromDirectory(
      "$env:APPVEYOR_BUILD_FOLDER\cov-int",
      "$env:APPVEYOR_BUILD_FOLDER\$env:APPVEYOR_PROJECT_NAME.zip",
      [IO.Compression.CompressionLevel]::Optimal,
      $true,  # include root directory
      (New-Object AnalyseCode.PortableFileNameEncoder))
    # Upload scan data.
    "Uploading Coverity results..."
    Add-Type -AssemblyName "System.Net.Http"
    $client = New-Object Net.Http.HttpClient
    $client.Timeout = [TimeSpan]::FromMinutes(20)
    $form = New-Object Net.Http.MultipartFormDataContent
    # Fill token field.
    [Net.Http.HttpContent]$formField =
      New-Object Net.Http.StringContent($env:CoverityProjectToken)
    $form.Add($formField, "`"token`"")
    # Fill email field.
    $formField = New-Object Net.Http.StringContent($env:CoverityNotificationEmail)
    $form.Add($formField, "`"email`"")
    # Fill file field.
    $fs = New-Object IO.FileStream(
      "$env:APPVEYOR_BUILD_FOLDER\$env:APPVEYOR_PROJECT_NAME.zip",
      [IO.FileMode]::Open,
      [IO.FileAccess]::Read)
    $formField = New-Object Net.Http.StreamContent($fs)
    $form.Add($formField, "`"file`"", "$env:APPVEYOR_PROJECT_NAME.zip")
    # Fill version field.
    $formField = New-Object Net.Http.StringContent($env:APPVEYOR_BUILD_VERSION)
    $form.Add($formField, "`"version`"")
    # Fill description field.
    $formField = New-Object Net.Http.StringContent("AppVeyor scheduled build.")
    $form.Add($formField, "`"description`"")
    # Submit form.
    $url = "https://scan.coverity.com/builds?project=$env:APPVEYOR_REPO_NAME"
    $task = $client.PostAsync($url, $form)
    try {
      $task.Wait()  # throws AggregateException on timeout
    } catch [AggregateException] {
      throw $_.Exception.InnerException
    }
    $task.Result
    $fs.Close()

artifacts:
- path: build\docs
  name: docs

test_script:
- cmd: cd c:\project\rts\build 
- cmd: ctest --build-config %configuration% --parallel 4 --output-on-failure

on_success:
- "python c:/project/rts/bin/irc-notify.py {color_code}13{project_name}{color_off}/{color_code}06{branch}{color_off} {color_code}14{short_commit}{color_off} {color_code}02{build_number}.{job_number}{color_off} {job_name} {color_code}03passed{color_off} {color_code}02{underline}{job_url}{color_off}"

on_failure:
- "python c:/project/rts/bin/irc-notify.py {color_code}13{project_name}{color_off}/{color_code}06{branch}{color_off} {color_code}14{short_commit}{color_off} {color_code}02{build_number}.{job_number}{color_off} {job_name} {color_code}04failed{color_off} {color_code}02{underline}{job_url}{color_off}"